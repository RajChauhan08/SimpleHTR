#include <iostream>
#include <vector>

struct Employee {
    int id;
    std::string name;
    int age;
    int departmentId;
    std::string departmentName;
    double salary;
    std::string dateOfJoining;

    Employee(int _id, const std::string& _name, int _age, int _departmentId, const std::string& _departmentName,
             double _salary, const std::string& _dateOfJoining)
        : id(_id), name(_name), age(_age), departmentId(_departmentId), departmentName(_departmentName),
          salary(_salary), dateOfJoining(_dateOfJoining) {}
};

std::vector<Employee> employees;

void addEmployee() {
    int id;
    std::string name;
    int age;
    int departmentId;
    std::string departmentName;
    double salary;
    std::string dateOfJoining;

    std::cout << "Enter employee ID: ";
    std::cin >> id;
    std::cout << "Enter employee name: ";
    std::cin.ignore();
    std::getline(std::cin, name);
    std::cout << "Enter employee age: ";
    std::cin >> age;
    std::cout << "Enter employee department ID: ";
    std::cin >> departmentId;
    std::cout << "Enter employee department name: ";
    std::cin.ignore();
    std::getline(std::cin, departmentName);
    std::cout << "Enter employee salary: ";
    std::cin >> salary;
    std::cout << "Enter employee date of joining: ";
    std::cin.ignore();
    std::getline(std::cin, dateOfJoining);

    employees.emplace_back(id, name, age, departmentId, departmentName, salary, dateOfJoining);
    std::cout << "Employee added successfully!\n";
}

void removeEmployee() {
    int id;

    std::cout << "Enter employee ID to remove: ";
    std::cin >> id;

    auto it = std::find_if(employees.begin(), employees.end(), [id](const Employee& emp) {
        return emp.id == id;
    });

    if (it != employees.end()) {
        employees.erase(it);
        std::cout << "Employee removed successfully!\n";
    } else {
        std::cout << "Employee not found!\n";
    }
}

void displayEmployees() {
    std::cout << "Employees:\n";
    for (const auto& emp : employees) {
        std::cout << "ID: " << emp.id << ", Name: " << emp.name << ", Age: " << emp.age
                  << ", Department ID: " << emp.departmentId << ", Department Name: " << emp.departmentName
                  << ", Salary: " << emp.salary << ", Date of Joining: " << emp.dateOfJoining << "\n";
    }
}

int main() {
    int choice;

    do {
        std::cout << "\nEmployee Management System\n";
        std::cout << "1. Add Employee\n";
        std::cout << "2. Remove Employee\n";
        std::cout << "3. Display Employees\n";
        std::cout << "4. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                addEmployee();
                break;
            case 2:
                removeEmployee();
                break;
            case 3:
                displayEmployees();
                break;
            case 4:
                std::cout << "Exiting the program...\n";
                break;
            default:
                std::cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 4);

    return 0;
}

